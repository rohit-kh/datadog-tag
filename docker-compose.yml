version: "3"
services:
  web:
    build: web
    command: ddtrace-run python app.py
    ports:
      - "5000:5000"
    volumes:
      - ./web:/code # modified here to take into account the new app path
    links:
      - redis
    environment:
      - DATADOG_HOST=datadog # used by the web app to initialize the Datadog library
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=false
      - DD_TRACE_ENABLED=true
      - DD_APM_CONFIG=true
      - DD_SERVICE=supplymanagement-dev
      - DD_LOGS_INJECTION=true
      - DD_ENV=dev
      - DD_APM_ENABLED=true
      - DD_PROFILING_ENABLED=true
      - DD_DOCKER_LABELS_AS_TAGS=product-key1:supply-document
      - DD_TAGS=product:training
      - DD_DOCKER_ENV_AS_TAGS='{"service-key1":"service_value1", "service-key2":"service_value2"}'
    deploy:
      labels:
        com.datadoghq.ad.tags: '["key1:value1", "key2:value2"]'
  redis:
    image: redis
  # agent section
  datadog:
    #    build: datadog
    image: datadog/agent:latest
#    ports:
#      - "8126:8126"
    links:
      - redis # ensures that redis is a host that the container can find
      - web # ensures that the web app can send metrics
    environment:
      - DD_API_KEY=<DD_API_KEY>
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=false
      - DD_TRACE_ENABLED=true
      - DD_APM_CONFIG=true
      - DD_ENV=dev
      - DD_APM_ENABLED=true
      - DD_PROFILING_ENABLED=true
      - DD_DOCKER_LABELS_AS_TAGS=product-key1:supply-document
      - DD_TAGS=product:training
      - DD_DOCKER_ENV_AS_TAGS=service-key1:service_value1, service-key2:service_value2
    deploy:
      labels:
        com.datadoghq.ad.tags: '{"service-key1":"service_value1", "service-key2":"service_value2"}'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup:/host/sys/fs/cgroup:ro